name: Check Broken Links

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at 00:00
  workflow_dispatch:  # Allow manual triggering

jobs:
  check_links:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache Node.js modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
    
    - name: Install dependencies
      run: npm install linkinator -g
    
    - name: Create reports directory
      run: mkdir -p reports
    
    - name: Check for broken links
      run: |
        DATE=$(date +'%Y-%m-%d')
        REPORT_FILE="reports/links_report_$DATE.txt"
        echo "Links Report for $DATE" > $REPORT_FILE
        echo "--------------------------------" >> $REPORT_FILE
        linkinator "${{ secrets.WEBSITE_URL }}" --recurse --skip "^(?!${{ secrets.WEBSITE_URL }})" --format CSV >> $REPORT_FILE
        echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
      continue-on-error: true
    
    - name: Check if broken links were found
      id: check_broken_links
      run: |
        if grep -q "BROKEN" "${{ env.REPORT_FILE }}"; then
          echo "broken_links_found=true" >> $GITHUB_OUTPUT
          echo "STATUS_MESSAGE=Broken links have been detected on the website. Please check the attached report for details." >> $GITHUB_ENV
        else
          echo "broken_links_found=false" >> $GITHUB_OUTPUT
          echo "STATUS_MESSAGE=No broken links found. All links are working correctly." >> $GITHUB_ENV
        fi
    
    - name: Commit report to repository
      if: always()
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add "${{ env.REPORT_FILE }}"
        git diff --quiet && git diff --staged --quiet || (git commit -m "Add links report for $(date +'%Y-%m-%d')" && git push)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload links report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: links-report
        path: ${{ env.REPORT_FILE }}
    
    - name: Send email notification
      id: send_email
      if: always()
      continue-on-error: true
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{secrets.SMTP_SERVER}}
        server_port: ${{secrets.SMTP_PORT}}
        username: ${{secrets.SMTP_USERNAME}}
        password: ${{secrets.SMTP_PASSWORD}}
        subject: ${{ steps.check_broken_links.outputs.broken_links_found == 'true' && 'Broken Links Found on Website' || 'No Broken Links Found on Website' }}
        body: ${{ env.STATUS_MESSAGE }}
        to: ab604@soton.ac.uk
        from: GitHub Actions
        attachments: ${{ env.REPORT_FILE }}
    
    - name: Create issue if email fails
      if: always() && steps.send_email.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const issueTitle = "Link Checker Email Notification Failed";
          const issueBody = `
          The link checker workflow completed, but the email notification failed to send.
          
          Please check the following:
          1. SMTP server settings
          2. Email credentials
          3. Server availability
          
          Workflow run: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          
          Report is available in the workflow artifacts.
          
          Status message: ${process.env.STATUS_MESSAGE}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['automation', 'email-failure']
          });
      env:
        STATUS_MESSAGE: ${{ env.STATUS_MESSAGE }}